apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: ebikes
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
        - name: wait-for-zookeeper
          image: busybox
          command:
            - sh
            - -c
            - |
              echo "Waiting for DNS resolution and port availability..."
              until nslookup zookeeper.ebikes.svc.cluster.local && nc -z zookeeper.ebikes.svc.cluster.local 2181; do
                echo "Zookeeper not ready yet..."
                sleep 2
              done
              echo "Zookeeper is up!"

      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.5.0
          ports:
            - containerPort: 9092
            - containerPort: 29092
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
#            - name: KAFKA_LOG4J_ROOT_LOGLEVEL
#              value: "DEBUG"
#            - name: KAFKA_TOOLS_LOG4J_LOGLEVEL
#              value: "DEBUG"
#            - name: KAFKA_OPTS
#              value: "-Djava.net.preferIPv4Stack=true -Dlog4j.debug=true"
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data

      volumes:
        - name: kafka-data
          emptyDir: {}
