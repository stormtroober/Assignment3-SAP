services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_INSTANCE_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - eureka-network
      - kafka-ditto-net
    healthcheck:
      test: echo srvr | nc zookeeper ${ZOOKEEPER_CLIENT_PORT} || exit 1
      interval: 5s
      timeout: 5s
      retries: 6
      start_period: 5s

  kafka-broker:
    image: confluentinc/cp-kafka:5.5.0
    container_name: kafka-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_BROKER_EXTERNAL_PORT}:${KAFKA_BROKER_EXTERNAL_PORT}"
    networks:
      - eureka-network
      - kafka-ditto-net
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:${KAFKA_BROKER_PORT},PLAINTEXT_HOST://localhost:${KAFKA_BROKER_EXTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:${KAFKA_BROKER_EXTERNAL_PORT} --list || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    ports:
      - "8087:8080"
    networks:
      - eureka-network
    environment:
      KAFKA_BROKERS: "kafka-broker:9092"
    depends_on:
      kafka-broker:
        condition: service_healthy

  eureka-server:
    build:
      context: ./service-discovery
    depends_on:
      - kafka-broker
    ports:
      - 8761:${EUREKA_INSTANCE_PORT}
    networks:
      - eureka-network
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=${EUREKA_CLIENT_REGISTER_WITH_EUREKA}
      - EUREKA_CLIENT_FETCH_REGISTRY=${EUREKA_CLIENT_FETCH_REGISTRY}
      - EUREKA_INSTANCE_HOSTNAME=${EUREKA_INSTANCE_HOSTNAME}
      - EUREKA_INSTANCE_PORT=${EUREKA_INSTANCE_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${EUREKA_INSTANCE_PORT}/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  map-microservice:
      build:
        context: ./map-microservice
      ports:
        - 8090:${MAP_INSTANCE_PORT}
      networks:
        - eureka-network
      depends_on:
        eureka-server:
          condition: service_healthy
      environment:
        - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
        - EUREKA_HOST=${EUREKA_INSTANCE_HOSTNAME}
        - EUREKA_PORT=${EUREKA_INSTANCE_PORT}
        - SERVICE_NAME=${MAP_INSTANCE_HOSTNAME}
        - SERVICE_PORT=${MAP_INSTANCE_PORT}
        - KAFKA_BROKER_HOSTNAME=${KAFKA_BROKER_HOSTNAME}
        - KAFKA_BROKER_PORT=${KAFKA_BROKER_PORT}
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost:${MAP_INSTANCE_PORT}/health || exit 1"]
        interval: 5s
        timeout: 5s
        retries: 3
        start_period: 5s

  mongodb:
    image: mongo:latest
    ports:
      - 27018:${MONGODB_INSTANCE_PORT}
    networks:
      - eureka-network
    environment:
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    volumes:
      - mongodb_data:/data/db
    command: --wiredTigerCacheSizeGB 1
    ulimits:
      memlock: -1
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' localhost:${MONGODB_INSTANCE_PORT}/test --quiet
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  ebike-microservice:
    build:
      context: ./ebike-microservice
    ports:
      - 8082:${EBIKE_INSTANCE_PORT}
    networks:
      - eureka-network
    depends_on:
      eureka-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      map-microservice:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      - EUREKA_HOST=${EUREKA_INSTANCE_HOSTNAME}
      - EUREKA_PORT=${EUREKA_INSTANCE_PORT}
      - SERVICE_NAME=${EBIKE_INSTANCE_HOSTNAME}
      - SERVICE_PORT=${EBIKE_INSTANCE_PORT}
      - MONGO_CONNECTION=${MONGODB_CONNECTION_STRING}
      - MONGO_DATABASE=${EBIKE_MONGODB_DATABASE}
      - KAFKA_BROKER_HOSTNAME=${KAFKA_BROKER_HOSTNAME}
      - KAFKA_BROKER_PORT=${KAFKA_BROKER_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${EBIKE_INSTANCE_PORT}/health"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  abike-microservice:
    build:
      context: ./abike-microservice
    ports:
      - 8085:${ABIKE_INSTANCE_PORT}
    networks:
      - eureka-network
    depends_on:
      eureka-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      map-microservice:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      - EUREKA_HOST=${EUREKA_INSTANCE_HOSTNAME}
      - EUREKA_PORT=${EUREKA_INSTANCE_PORT}
      - SERVICE_NAME=${ABIKE_EUREKA_SERVICE_NAME}
      - SERVICE_PORT=${ABIKE_INSTANCE_PORT}
      - MONGO_CONNECTION=${MONGODB_CONNECTION_STRING}
      - MONGO_DATABASE=${EBIKE_MONGODB_DATABASE}
      - KAFKA_BROKER_HOSTNAME=${KAFKA_BROKER_HOSTNAME}
      - KAFKA_BROKER_PORT=${KAFKA_BROKER_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${ABIKE_INSTANCE_PORT}/health"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  ride-microservice:
    build:
      context: ./ride-microservice
    ports:
      - 8083:${RIDE_INSTANCE_PORT}
    networks:
      - eureka-network
    depends_on:
      eureka-server:
        condition: service_healthy
      ebike-microservice:
        condition: service_healthy
      user-microservice:
        condition: service_healthy
      map-microservice:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      - EUREKA_HOST=${EUREKA_INSTANCE_HOSTNAME}
      - EUREKA_PORT=${EUREKA_INSTANCE_PORT}
      - SERVICE_NAME=${RIDE_INSTANCE_HOSTNAME}
      - SERVICE_PORT=${RIDE_INSTANCE_PORT}
      - KAFKA_BROKER_HOSTNAME=${KAFKA_BROKER_HOSTNAME}
      - KAFKA_BROKER_PORT=${KAFKA_BROKER_PORT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${RIDE_INSTANCE_PORT}/health" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  user-microservice:
    build:
      context: ./user-microservice
    ports:
      - 8084:${USER_INSTANCE_PORT}
    networks:
      - eureka-network
    depends_on:
      eureka-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      - EUREKA_HOST=${EUREKA_INSTANCE_HOSTNAME}
      - EUREKA_PORT=${EUREKA_INSTANCE_PORT}
      - SERVICE_NAME=${USER_INSTANCE_HOSTNAME}
      - SERVICE_PORT=${USER_INSTANCE_PORT}
      - MONGO_CONNECTION=${MONGODB_CONNECTION_STRING}
      - MONGO_DATABASE=${USER_MONGODB_DATABASE}
      - KAFKA_BROKER_HOSTNAME=${KAFKA_BROKER_HOSTNAME}
      - KAFKA_BROKER_PORT=${KAFKA_BROKER_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${USER_INSTANCE_PORT}/health" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - 8088:${API_GATEWAY_EUREKA_INSTANCE_PORT}
    networks:
      - eureka-network
    depends_on:
      eureka-server:
        condition: service_healthy
      ebike-microservice:
        condition: service_healthy
      user-microservice:
        condition: service_healthy
      map-microservice:
        condition: service_healthy
      ride-microservice:
        condition: service_healthy
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
      - API_GATEWAY_EUREKA_INSTANCE_HOSTNAME=${API_GATEWAY_EUREKA_INSTANCE_HOSTNAME}
      - API_GATEWAY_EUREKA_INSTANCE_PORT=${API_GATEWAY_EUREKA_INSTANCE_PORT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_GATEWAY_EUREKA_INSTANCE_PORT}/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 6s

  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:${PROMETHEUS_INSTANCE_PORT}
    networks:
      - eureka-network
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml  # Mount Prometheus configuration file
    depends_on:
      api-gateway:
        condition: service_healthy


networks:
  eureka-network:
    driver: bridge
  kafka-ditto-net:
    external: true
volumes:
  mongodb_data: